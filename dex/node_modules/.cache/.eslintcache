[{"C:\\Users\\MohamedEssack\\Downloads\\dexFinal-main\\dexFinal-main\\dexFinal\\dex\\src\\index.js":"1","C:\\Users\\MohamedEssack\\Downloads\\dexFinal-main\\dexFinal-main\\dexFinal\\dex\\src\\App.js":"2","C:\\Users\\MohamedEssack\\Downloads\\dexFinal-main\\dexFinal-main\\dexFinal\\dex\\src\\components\\Tokens.js":"3","C:\\Users\\MohamedEssack\\Downloads\\dexFinal-main\\dexFinal-main\\dexFinal\\dex\\src\\components\\Header.js":"4","C:\\Users\\MohamedEssack\\Downloads\\dexFinal-main\\dexFinal-main\\dexFinal\\dex\\src\\components\\Swap.js":"5"},{"size":725,"mtime":1694898490051,"results":"6","hashOfConfig":"7"},{"size":839,"mtime":1694898489864,"results":"8","hashOfConfig":"7"},{"size":108,"mtime":1694898490518,"results":"9","hashOfConfig":"7"},{"size":925,"mtime":1695042440012,"results":"10","hashOfConfig":"7"},{"size":6673,"mtime":1694898490407,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12g17um",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"C:\\Users\\MohamedEssack\\Downloads\\dexFinal-main\\dexFinal-main\\dexFinal\\dex\\src\\index.js",[],[],"C:\\Users\\MohamedEssack\\Downloads\\dexFinal-main\\dexFinal-main\\dexFinal\\dex\\src\\App.js",[],[],"C:\\Users\\MohamedEssack\\Downloads\\dexFinal-main\\dexFinal-main\\dexFinal\\dex\\src\\components\\Tokens.js",[],[],"C:\\Users\\MohamedEssack\\Downloads\\dexFinal-main\\dexFinal-main\\dexFinal\\dex\\src\\components\\Header.js",[],[],"C:\\Users\\MohamedEssack\\Downloads\\dexFinal-main\\dexFinal-main\\dexFinal\\dex\\src\\components\\Swap.js",["28","29","30"],[],"import React, { useState, useEffect } from \"react\";\nimport { Input, Popover, Radio, Modal, message } from \"antd\";\nimport {\n  ArrowDownOutlined,\n  DownOutlined,\n  SettingOutlined,\n} from \"@ant-design/icons\";\nimport tokenList from \"../tokenList.json\";\nimport axios from \"axios\";\nimport { useSendTransaction, useWaitForTransaction } from \"wagmi\";\n\n\nfunction Swap(props) {\n  const { address, isConnected } = props;\n  const [messageApi, contextHolder] = message.useMessage();\n  const [slippage, setSlippage] = useState(2.5);\n  const [tokenOneAmount, setTokenOneAmount] = useState(null);\n  const [tokenTwoAmount, setTokenTwoAmount] = useState(null);\n  const [tokenOne, setTokenOne] = useState(tokenList[0]);\n  const [tokenTwo, setTokenTwo] = useState(tokenList[1]);\n  const [isOpen, setIsOpen] = useState(false);\n  const [changeToken, setChangeToken] = useState(1);\n  const [prices, setPrices] = useState(null);\n  const [txDetails, setTxDetails] = useState({\n    to:null,\n    data: null,\n    value: null,\n  }); \n\n  const {data, sendTransaction} = useSendTransaction({\n    request: {\n      from: address,\n      to: String(txDetails.to),\n      data: String(txDetails.data),\n      value: String(txDetails.value),\n    }\n  })\n\n  const { isLoading, isSuccess } = useWaitForTransaction({\n    hash: data?.hash,\n  })\n\n  function handleSlippageChange(e) {\n    setSlippage(e.target.value);\n  }\n\n  function changeAmount(e) {\n    setTokenOneAmount(e.target.value);\n    if(e.target.value && prices){\n      setTokenTwoAmount((e.target.value * prices.ratio).toFixed(2))\n    }else{\n      setTokenTwoAmount(null);\n    }\n  }\n\n  function switchTokens() {\n    setPrices(null);\n    setTokenOneAmount(null);\n    setTokenTwoAmount(null);\n    const one = tokenOne;\n    const two = tokenTwo;\n    setTokenOne(two);\n    setTokenTwo(one);\n    fetchPrices(two.address, one.address);\n  }\n\n  function openModal(asset) {\n    setChangeToken(asset);\n    setIsOpen(true);\n  }\n\n  function modifyToken(i){\n    setPrices(null);\n    setTokenOneAmount(null);\n    setTokenTwoAmount(null);\n    if (changeToken === 1) {\n      setTokenOne(tokenList[i]);\n      fetchPrices(tokenList[i].address, tokenTwo.address)\n    } else {\n      setTokenTwo(tokenList[i]);\n      fetchPrices(tokenOne.address, tokenList[i].address)\n    }\n    setIsOpen(false);\n  }\n\n  async function fetchPrices(one, two){\n\n      const res = await axios.get(`http://localhost:3001/tokenPrice`, {\n        params: {addressOne: one, addressTwo: two}\n      })\n\n      \n      setPrices(res.data)\n  }\n\n  async function fetchDexSwap(){\n\n    const allowance = await axios.get(`https://api.1inch.io/v5.0/1/approve/allowance?tokenAddress=${tokenOne.address}&walletAddress=${address}`)\n  \n    if(allowance.data.allowance === \"0\"){\n\n      const approve = await axios.get(`https://api.1inch.io/v5.0/1/approve/transaction?tokenAddress=${tokenOne.address}`)\n\n      setTxDetails(approve.data);\n      console.log(\"not approved\")\n      return\n\n    }\n\n    const tx = await axios.get(\n      `https://api.1inch.io/v5.0/1/swap?fromTokenAddress=${tokenOne.address}&toTokenAddress=${tokenTwo.address}&amount=${tokenOneAmount.padEnd(tokenOne.decimals+tokenOneAmount.length, '0')}&fromAddress=${address}&slippage=${slippage}`\n    )\n\n    let decimals = Number(`1E${tokenTwo.decimals}`)\n    setTokenTwoAmount((Number(tx.data.toTokenAmount)/decimals).toFixed(2));\n\n    setTxDetails(tx.data.tx);\n  \n  }\n\n\n  useEffect(()=>{\n\n    fetchPrices(tokenList[0].address, tokenList[1].address)\n\n  }, [])\n\n  useEffect(()=>{\n\n      if(txDetails.to && isConnected){\n        sendTransaction();\n      }\n  }, [txDetails])\n\n  useEffect(()=>{\n\n    messageApi.destroy();\n\n    if(isLoading){\n      messageApi.open({\n        type: 'loading',\n        content: 'Transaction is Pending...',\n        duration: 0,\n      })\n    }    \n\n  },[isLoading])\n\n  useEffect(()=>{\n    messageApi.destroy();\n    if(isSuccess){\n      messageApi.open({\n        type: 'success',\n        content: 'Transaction Successful',\n        duration: 1.5,\n      })\n    }else if(txDetails.to){\n      messageApi.open({\n        type: 'error',\n        content: 'Transaction Failed',\n        duration: 1.50,\n      })\n    }\n\n\n  },[isSuccess])\n\n\n  const settings = (\n    <>\n      <div>Slippage Tolerance</div>\n      <div>\n        <Radio.Group value={slippage} onChange={handleSlippageChange}>\n          <Radio.Button value={0.5}>0.5%</Radio.Button>\n          <Radio.Button value={2.5}>2.5%</Radio.Button>\n          <Radio.Button value={5}>5.0%</Radio.Button>\n        </Radio.Group>\n      </div>\n    </>\n  );\n\n  return (\n    <>\n      {contextHolder}\n      <Modal\n        open={isOpen}\n        footer={null}\n        onCancel={() => setIsOpen(false)}\n        title=\"Select a token\"\n      >\n        <div className=\"modalContent\">\n          {tokenList?.map((e, i) => {\n            return (\n              <div\n                className=\"tokenChoice\"\n                key={i}\n                onClick={() => modifyToken(i)}\n              >\n                <img src={e.img} alt={e.ticker} className=\"tokenLogo\" />\n                <div className=\"tokenChoiceNames\">\n                  <div className=\"tokenName\">{e.name}</div>\n                  <div className=\"tokenTicker\">{e.ticker}</div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </Modal>\n      <div className=\"tradeBox\">\n        <div className=\"tradeBoxHeader\">\n          <h4>Swap</h4>\n          <Popover\n            content={settings}\n            title=\"Settings\"\n            trigger=\"click\"\n            placement=\"bottomRight\"\n          >\n            <SettingOutlined className=\"cog\" />\n          </Popover>\n        </div>\n        <div className=\"inputs\">\n          <Input\n            placeholder=\"0\"\n            value={tokenOneAmount}\n            onChange={changeAmount}\n            disabled={!prices}\n          />\n          <Input placeholder=\"0\" value={tokenTwoAmount} disabled={true} />\n          <div className=\"switchButton\" onClick={switchTokens}>\n            <ArrowDownOutlined className=\"switchArrow\" />\n          </div>\n          <div className=\"assetOne\" onClick={() => openModal(1)}>\n            <img src={tokenOne.img} alt=\"assetOneLogo\" className=\"assetLogo\" />\n            {tokenOne.ticker}\n            <DownOutlined />\n          </div>\n          <div className=\"assetTwo\" onClick={() => openModal(2)}>\n            <img src={tokenTwo.img} alt=\"assetOneLogo\" className=\"assetLogo\" />\n            {tokenTwo.ticker}\n            <DownOutlined />\n          </div>\n        </div>\n        <div className=\"swapButton\" disabled={!tokenOneAmount || !isConnected} onClick={fetchDexSwap}>Swap</div>\n      </div>\n    </>\n  );\n}\n\nexport default Swap;\n",{"ruleId":"31","severity":1,"message":"32","line":133,"column":6,"nodeType":"33","endLine":133,"endColumn":17,"suggestions":"34"},{"ruleId":"31","severity":1,"message":"35","line":147,"column":5,"nodeType":"33","endLine":147,"endColumn":16,"suggestions":"36"},{"ruleId":"31","severity":1,"message":"37","line":166,"column":5,"nodeType":"33","endLine":166,"endColumn":16,"suggestions":"38"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isConnected' and 'sendTransaction'. Either include them or remove the dependency array.","ArrayExpression",["39"],"React Hook useEffect has a missing dependency: 'messageApi'. Either include it or remove the dependency array.",["40"],"React Hook useEffect has missing dependencies: 'messageApi' and 'txDetails.to'. Either include them or remove the dependency array.",["41"],{"desc":"42","fix":"43"},{"desc":"44","fix":"45"},{"desc":"46","fix":"47"},"Update the dependencies array to be: [isConnected, sendTransaction, txDetails]",{"range":"48","text":"49"},"Update the dependencies array to be: [isLoading, messageApi]",{"range":"50","text":"51"},"Update the dependencies array to be: [isSuccess, messageApi, txDetails.to]",{"range":"52","text":"53"},[3577,3588],"[isConnected, sendTransaction, txDetails]",[3796,3807],"[isLoading, messageApi]",[4156,4167],"[isSuccess, messageApi, txDetails.to]"]